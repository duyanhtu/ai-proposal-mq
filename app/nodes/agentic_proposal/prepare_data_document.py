# Standard imports
from pathlib import Path
import time
import os

# Third party imports
import concurrent
import fitz
from langchain_core.prompts import ChatPromptTemplate

# Your imports
from app.config.env import EnvSettings
from app.nodes.agentic_proposal.extraction_handle_error import format_error_message
from app.utils.logger import get_logger
from app.model_ai import llm
from app.storage import pgdb
from app.nodes.states.state_proposal_v1 import StateProposalV1
from app.utils.minio import download_from_minio

logger = get_logger("except_handling_extraction")

MINIO_API_ENDPOINT = EnvSettings().MINIO_API_ENDPOINT  # C·ªïng API
MINIO_CONSOLE_ENDPOINT = EnvSettings().MINIO_CONSOLE_ENDPOINT  # C·ªïng Console (UI)
MINIO_ACCESS_KEY = EnvSettings().MINIO_ACCESS_KEY
MINIO_SECRET_KEY = EnvSettings().MINIO_SECRET_KEY
MINIO_SECURE = EnvSettings().MINIO_SECURE

# L·∫•y ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi c·ªßa th∆∞ m·ª•c ch·ª©a main.py
BASE_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
)
# Th∆∞ m·ª•c l∆∞u file t·∫£i v·ªÅ
TEMPLATE_FILE_PATH = os.path.join(BASE_DIR, "temp")
# T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
os.makedirs(TEMPLATE_FILE_PATH, exist_ok=True)


class PrepareDataDocumentNodeV1:
    """
    ExtractionHRMDNodeV1m1p0

    B√≥c t√°ch th√¥ng tin c√°c y√™u c·∫ßu v·ªÅ nh√¢n s·ª± trong h·ªì s∆° m·ªùi th·∫ßu .
    - Input: chapter_content: List[str]
    - Output: result_extraction_hr: Any (json)

    Improvement:
    - update prompt:
        - l·∫•y th√™m bi·ªÉu m·∫´u y√™u c·∫ßu c·ªßa h·ªì s∆° cho t·ª´ng requirement.
        - b·ªï sung v√≠ d·ª• v·ªõi nhi·ªÅu t√¨nh hu·ªëng ƒë·ªÉ model hi·ªÉu h∆°n.
    """

    def __init__(self, name: str):
        self.name = name
        self.downloaded_files = []

    def download_file(self, dfm):
        """T·∫£i file t·ª´ MinIO n·∫øu ch∆∞a c√≥"""
        file_name = dfm["mdpath"].split("/")[-1]
        bucket_name = dfm["mdpath"].split("/")[0]
        logger.debug(f"Starting download of file: {file_name} from bucket: {bucket_name}")
        # Ki·ªÉm tra xem th∆∞ m·ª•c temp c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(TEMPLATE_FILE_PATH):
            os.makedirs(TEMPLATE_FILE_PATH, exist_ok=True)
            logger.info(f"ƒê√£ t·∫°o th∆∞ m·ª•c: {TEMPLATE_FILE_PATH}")
        download_path = os.path.join(TEMPLATE_FILE_PATH, file_name)
        logger.info(f"[‚¨á] ƒêang t·∫£i file: {file_name}...")

        try:
            file_md_downloaded = download_from_minio(
                object_name=file_name,
                download_path=download_path,
                bucket_name=bucket_name,
                minio_endpoint=f"http://{MINIO_API_ENDPOINT}",
                access_key=MINIO_ACCESS_KEY,
                secret_key=MINIO_SECRET_KEY,
            )
            self.downloaded_files.append(download_path)
            logger.info(f"[‚úî] ƒê√£ t·∫£i xong: {file_name}")
            return file_md_downloaded
        except Exception as e:
            logger.error(f"Failed to download file {file_name}. Error: {str(e)}")

    # Defining __call__ method
    def __call__(self, state: StateProposalV1):
        print(self.name)
        try:
            start_time = time.perf_counter()
            document_file_md = state["document_file_md"]
            hs_id = state["hs_id"]
            # 1. T·∫£i file PDF g·ªëc c·ªßa HSMT
            sql = f"""
                SELECT *
                FROM email_contents
                WHERE hs_id = '{hs_id}' AND type = 'HSMT'
            """
            result = pgdb.select(sql)
            if not result:
                logger.warning(" [x] Kh√¥ng c√≥ t√†i li·ªáu h·ªì s∆° m·ªùi th·∫ßu!")
            # ƒê·ªãnh nghƒ©a gi√° tr·ªã m·∫∑c ƒë·ªãnh l·∫•y t·ª´ link ƒë·ªëi v·ªõi TEXT
            # C√≤n kh√¥ng th√¨ l·∫•y t·ª´ markdown_link
            mdpath = result[0].get("link", "") 
            bucket = result[0].get("link", "").split("/")[0]
            if result[0].get("markdown_link", None) is not None:
                mdpath = result[0].get("markdown_link", "") 
                bucket = result[0].get("markdown_link", "") .split("/")[0]

            file_pdf_all_hsmt = {
                "mdpath": mdpath,
                "bucket": bucket
            }
            file_pdf_all_downloaded = self.download_file(file_pdf_all_hsmt)
            document_content = []
            try:
                if file_pdf_all_downloaded.endswith(".md"):
                    # ƒê·ªçc n·ªôi dung file Markdown v√† t√°ch theo d√≤ng
                    content = Path(file_pdf_all_downloaded).read_text(encoding="utf-8")
                    # Chia n·ªôi dung th√†nh c√°c ƒëo·∫°n 1000 k√Ω t·ª±
                    chunk_size = 500
                    chunks = [content[i:i + chunk_size] for i in range(0, len(content), chunk_size)]

                    # Th√™m v√†o document_content
                    document_content.extend(chunks)
                    logger.info(f"ƒê√£ ƒë·ªçc n·ªôi dung Markdown t·ª´ {file_pdf_all_downloaded}")
                else:
                    # ƒê·ªçc n·ªôi dung PDF theo trang
                    with fitz.open(file_pdf_all_downloaded) as pdf_document:
                        for page in pdf_document:
                            document_content.append(page.get_text("text"))
                    logger.info(f"ƒê√£ ƒë·ªçc n·ªôi dung PDF t·ª´ {file_pdf_all_downloaded}")
            except Exception as e:
                logger.error(f"L·ªói khi ƒë·ªçc n·ªôi dung t·ª´ file {file_pdf_all_downloaded}: {str(e)}")

            # with fitz.open(file_pdf_all_downloaded) as pdf_document:
            #     for page in pdf_document:
            #         document_content.append(page.get_text("text"))
            # 2. T·∫£i 3 file MD (bao g·ªìm m·ªôt file HSKT, TBMT v√† ch∆∞∆°ng 3 c·ªßa HSMT)
            document_content_markdown_tbmt = ""
            document_content_markdown_hskt = ""
            document_content_markdown_hsmt = ""

            for dfm in document_file_md:
                logger.info(f"Processing file of type: {dfm['type']}")
                file_md_downloaded = self.download_file(dfm)
                document_content_markdown = Path(file_md_downloaded).read_text(encoding="utf-8")
                if dfm["type"] == "TBMT":
                    document_content_markdown_tbmt = document_content_markdown
                elif dfm["type"] == "HSKT":
                    document_content_markdown_hskt = document_content_markdown
                elif dfm["type"] == "HSMT":
                    document_content_markdown_hsmt = document_content_markdown
                logger.debug(f"Finished processing {dfm['type']} file")

            # 3. X√≥a file ƒë∆∞·ª£c t·∫£i xu·ªëng trong th∆∞ m·ª•c temp
            for file_path in self.downloaded_files:
                try:
                    os.remove(file_path)
                    logger.debug(f"[üóë] ƒê√£ x√≥a: {file_path}")
                except Exception as e:
                    logger.error(f"[‚ö†] L·ªói khi x√≥a {file_path}: {str(e)}")

            finish_time = time.perf_counter()
            logger.info(f"Total time: {finish_time - start_time} s")
            return {
                "email_content_id": result[0]["id"],
                "document_content": document_content,
                "document_content_markdown_tbmt": document_content_markdown_tbmt,
                "document_content_markdown_hskt": document_content_markdown_hskt,
                "document_content_markdown_hsmt": document_content_markdown_hsmt
            }
        except Exception as e:
            error_msg = format_error_message(
                node_name=self.name,
                e=e,
                context=f"hs_id: {state.get('hs_id', '')}", 
                include_trace=True
            )
            return {
                "document_content": [],
                "document_content_markdown_tbmt": "",
                "document_content_markdown_hskt": "",
                "document_content_markdown_hsmt": "",
                "error_messages": [error_msg],
            }
